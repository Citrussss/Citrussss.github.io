<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.arakawa.top/</id>
    <title>Arakawa</title>
    <updated>2020-06-18T12:12:02.553Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.arakawa.top/"/>
    <link rel="self" href="https://www.arakawa.top/atom.xml"/>
    <subtitle>欢迎到访，朋友</subtitle>
    <logo>https://www.arakawa.top/images/avatar.png</logo>
    <icon>https://www.arakawa.top/favicon.ico</icon>
    <rights>All rights reserved 2020, Arakawa</rights>
    <entry>
        <title type="html"><![CDATA[关于Android：商城类，商品规格选择逻辑及实现]]></title>
        <id>https://www.arakawa.top/post/guan-yu-androidshang-cheng-lei-shang-pin-gui-ge-xuan-ze-luo-ji-ji-shi-xian/</id>
        <link href="https://www.arakawa.top/post/guan-yu-androidshang-cheng-lei-shang-pin-gui-ge-xuan-ze-luo-ji-ji-shi-xian/">
        </link>
        <updated>2020-06-18T12:07:57.000Z</updated>
        <content type="html"><![CDATA[<pre><code>    虽然之前接过两个电商项目，但是一个无规格选择，一个虽然有规格选择，但是只有两组（娃直接写死了，23333）
</code></pre>
<p>现在终于遇到一个真正的规格选择逻辑需要处理。在此记录一下自己的思路。<br>
大致方向：我打算用两层RecyclerView做嵌套：<br>
<img src="https://upload-images.jianshu.io/upload_images/20040136-0e7750183bfd20d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如上图所示" loading="lazy"></p>
<p>内层是使用了一个之前做的多选器（鬼知道哪天产品可能要求某个规格能多选。逃）<br>
然后将能否选择的逻辑委托到外层的适配器中（ps：因为内层之间互不联系，但是逻辑关联）<br>
好了逻辑好像很清晰了<br>
<img src="https://upload-images.jianshu.io/upload_images/20040136-20bf85e3ce7ec100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="i流程图" loading="lazy"></p>
<p>然后就可以撸起袖子开始干活了。<br>
先说说内层的适配器：要的逻辑其实不多，关键是单个参数能否被选择的逻辑，第一次我是考虑将能选择的参数作为复数数组处理完再分发进对应的内层适配器。发现这样写有点蛋疼。然后就考虑在刷新视图的时候逐个判断参数能否被选中</p>
<pre><code class="language-kotlin">    /**
     * 选择
     */
    var onSelect: ((key: String, value: String) -&gt; Unit)? = null
    private fun onItemClick(baseQuickAdapter: BaseQuickAdapter&lt;*, *&gt;, view: View, position: Int) {
        if (baseQuickAdapter is ProductSpecificationAdapter) {
            val adapter = baseQuickAdapter
            adapter.select(adapter.getItem(position))
            val key = this.key
            val value = if (selectList.isEmpty()) {
                &quot;&quot;
            } else {
                selectList[0].title
            }
            onSelect?.invoke(key ?: this.toString(), value)
        }
    }
</code></pre>
<pre><code class="language-kotlin">   /**
     * 判断该属性是否可选
     */
    var computeEnable: ((key: String, value: String) -&gt; Boolean)? = null
    /**
     * convert方法代理
     */
    var convertProxy: ((helper: BaseViewHolder, item: Item, isSelect: Boolean, isEnable: Boolean) -&gt; Unit)? = null

    override fun convert(helper: BaseViewHolder, item: Item) {
        val key = this.key
        val value = item.title
        val isSelect = selectList.contains(item)
        val isEnable = key?.let { computeEnable?.invoke(it, value) } ?: false
        convertProxy?.invoke(helper, item, isSelect, isEnable)
    }
</code></pre>
<p>将内层负责渲染的逻辑也放到了外面去，内层的职责已经被分担的很轻松，只需要分发事件，管理选中状态</p>
<p>现在看看外层逻辑</p>
<pre><code class="language-kotlin">    /**
     * 商品1 ；白 35
     * 商品2 : 黑 35
     * 商品3 ：黑 34
     * 已选{白} 已选{&quot;&quot;}
     * 解释以下：入参是规格和具体参数，然后在遍历一遍商品的规格，匹配出符合已选参数的商品，注意此      
     * 时做判断要小心同规格的参数比较，这是无意义而且错误，比如入参是白色，但是已选白色或者黑色， 
     * 判断是无意义的，此时只需要关心尺码和其他规格是否符合即可。
     * @return 如果能找到一个包含此规格+已选规格的商品 则返回true
     */
    fun computeEnable(key: String, value: String): Boolean {
        //商品池
        skus
            //过滤不包含此规格的商品
            .filter { it.containsKey(key) &amp;&amp; it.containsValue(value) }
            .forEach {
            var valid = true
            val iterator = selected.iterator()
            while (iterator.hasNext()) {
                val next = iterator.next()
                // 同组不做对比 ; 空值不做对比
                if (next.key == key || TextUtils.isEmpty(next.value)) continue

                valid = valid &amp;&amp; it.containsKey(next.key) &amp;&amp; it.containsValue(next.value)
            }
            if (valid) {
                return true
            }
        }
        return false
    }

    /**
     * 单个规格的视图切换
     */
    fun convertChild(helper: BaseViewHolder, item: BaseSelectAdapter.Item, isSelect: Boolean, isEnable: Boolean) {
        if (convertProxy == null) {
            LogUtils.eTag(&quot;init&quot;, &quot;请给方法对象：convertProxy赋值！&quot;)
        }
        convertProxy?.invoke(helper, item, isSelect, isEnable)
    }

    /**
     * 选中一个规格
     */
    fun onSelect(key: String, value: String) {
        selected[key] = value
        lastSelectKey = key
        lastSelectValue = value
        notifyDataSetChanged()
    }
</code></pre>
<p>最关键的方法是计算可选的逻辑：算法可能不是最优：如果有大佬指点一下，万万感谢！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记录一次 学习饺子播放器切换全屏播放原理]]></title>
        <id>https://www.arakawa.top/post/ji-lu-yi-ci-xue-xi-jiao-zi-bo-fang-qi-qie-huan-quan-ping-bo-fang-yuan-li/</id>
        <link href="https://www.arakawa.top/post/ji-lu-yi-ci-xue-xi-jiao-zi-bo-fang-qi-qie-huan-quan-ping-bo-fang-yuan-li/">
        </link>
        <updated>2020-06-18T12:01:31.000Z</updated>
        <content type="html"><![CDATA[<p>学习的第一步就是先找到函数的入口：根据R.id.fullscreen这个全屏按钮的点击事件，我们很快就能定位到名叫gotoScreenFullscreen的函数。</p>
<pre><code>code line 737
 public void gotoScreenFullscreen() {
        ViewGroup vg = (ViewGroup) getParent();
        vg.removeView(this);
        cloneAJzvd(vg);
        CONTAINER_LIST.add(vg);//作者在这里保存了原视图的父布局
        vg = (ViewGroup) (JZUtils.scanForActivity(getContext())).getWindow().getDecorView();//和他也没有关系
        vg.addView(this, new FrameLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));

        setScreenFullscreen();
        JZUtils.hideStatusBar(getContext());
        JZUtils.setRequestedOrientation(getContext(), FULLSCREEN_ORIENTATION);
        JZUtils.hideSystemUI(getContext());//华为手机和有虚拟键的手机全屏时可隐藏虚拟键 issue:1326

    }
</code></pre>
<p>从上方代码第三行跳转到下面这个方法，可以看出作者用构造器构造了一个新的对象替代了原来位置的对象。</p>
<pre><code> public void cloneAJzvd(ViewGroup vg) {
        try {
            Constructor&lt;Jzvd&gt; constructor = (Constructor&lt;Jzvd&gt;) Jzvd.this.getClass().getConstructor(Context.class);
            Jzvd jzvd = constructor.newInstance(getContext());
            jzvd.setId(getId());
            vg.addView(jzvd);
            jzvd.setUp(jzDataSource.cloneMe(), SCREEN_NORMAL, mediaInterfaceClass);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
    }
</code></pre>
<p>继续看第一个方法第四行开始，毫无疑问，作者获取getDecorView（）根视图，然后将原来的对象放入了跟视图，同时隐藏了状态栏，也即是开启了全屏模式，汗，简单粗暴。<br>
还不够，那如何从全屏模式回来呢，作者在打开全屏的时候，就将原视图的父容器存放到了一个链表中。</p>
<pre><code> public static boolean backPress() {
        Log.i(TAG, &quot;backPress&quot;);
        if (CONTAINER_LIST.size() != 0 &amp;&amp; CURRENT_JZVD != null) {//判断条件，因为当前所有goBack都是回到普通窗口
            CURRENT_JZVD.gotoScreenNormal();
            return true;
        } else if (CONTAINER_LIST.size() == 0 &amp;&amp; CURRENT_JZVD != null &amp;&amp; CURRENT_JZVD.screen != SCREEN_NORMAL) {//退出直接进入的全屏
            CURRENT_JZVD.clearFloatScreen();
            return true;
        }
        return false;
    }
</code></pre>
<p>进入正题</p>
<pre><code>  public void gotoScreenNormal() {//goback本质上是goto
        gobakFullscreenTime = System.currentTimeMillis();//退出全屏
        ViewGroup vg = (ViewGroup) (JZUtils.scanForActivity(getContext())).getWindow().getDecorView();
        vg.removeView(this);
        CONTAINER_LIST.getLast().removeAllViews();
        CONTAINER_LIST.getLast().addView(this, new FrameLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        CONTAINER_LIST.pop();

        setScreenNormal();//这块可以放到jzvd中
        JZUtils.showStatusBar(getContext());
        JZUtils.setRequestedOrientation(getContext(), NORMAL_ORIENTATION);
        JZUtils.showSystemUI(getContext());
    }
</code></pre>
<p>看完上面的代码一开始有点蒙蔽，为啥要把父容器的中视图全清理掉。回忆之前的接入过程，是因为</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
  &lt;LinearLayout
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;&gt;
        &lt;cn.jzvd.JzvdStd
            android:id=&quot;@+id/jz_video&quot;
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;match_parent&quot; /&gt;
    &lt;/LinearLayout&gt;
</code></pre>
<p>如上所示，作者一开始就要求为播放器增加一层嵌套，可能是为了图方便，毕竟这比从复杂布局中恢复容易的多。<br>
至此了解饺子播放器全屏播放的原理了。<br>
感想：我也想过做全屏播放，可从没想过这样来切换，我想的是构造新的SufaceView然后重新接入视屏播放的数据，把问题想复杂了，感谢大佬的代码让我豁然开朗。</p>
]]></content>
    </entry>
</feed>